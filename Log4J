LOG4J
Table of content
Log4J in Selenium

Logger
Appender
Layout
Install / Associate Log4J
Log4J with Properties file
Xml file configuration with Log4J
HTML Logging in Log4J
Advantages of Log4J


Log4J in Selenium
Log4j is a framework which helps the java user to record the messages (logs) during the execution time. Logs are nothing but the detailed execution steps.
Log4j write all the messages into files, files could be in many formats like a text file, log file, html file. Users have to configure the log4j before using it.
We can configure the log4j in two ways :
Properties file configuration
XML file configuration
Components of log4j :
Logger
Appender
Layout
i.e

public class FirstLog {
	static Logger log = Logger.getLogger(FirstLog.class);
	public static void main(String[] args) {
		//PropertiesConfigurator is used to configure logger from a properties file
        PropertyConfigurator.configure("C:\~\log4j.properties");

        //log the message to file
        log.trace("This is a debug message");
        log.info("This is an info message");
	}
}

# Logger

Logger captures the log messages generated by the framework, and it passes the logs to appends. Logger decides where to send the information like whether to file or to console. Loggers also decide what priority level to be captured.

Logger Priority Levels : All the levels are static variable and every level indicates a specific int value, as int value increases the rank also increases i.e max int values have max rank, least int value has the least rank.

ALL -Integer.MIN_VAL : The ALL has the lowest possible rank and lowest int values, it is intended to turn on all logging.

TRACE - 5000 : This log4j level gives more detailed information than the DEBUG level and sits top of the hierarchy after ALL.

DEBUG - 10000 : To debug the application, developers give the priority to debug. Level of message logged will be focused on providing support to an application developer

INFO - 20000 : Provides informational messages that highlight the progress of the application execution.

WARN - 30000 : The messages coming out of this level may not halt the progress of the system, but informs the user something unexpected is happening

ERROR - 40000 : The ERROR level designates error events that might still allow the application to continue running, means a particular part is failing but not a showstopper.

FATAL - 50000 : The FATAL level designates very severe error events that will presumably lead the application to abort, means it is a showstopper.

OFF - Integer.MAX_VAL : Does not capture any log and it's int value is Maximum value an integer can hold.


# Appender

Appenders writes the log messages decided by the logger into a file or to a database. Appenders delegates the message to the formatter. There are different kind of appenders

* FileAppender : It appends the message to a file.
* RollingFileAppender : It also appends the messages to the file with file size limit, when the file reaches the size limit automatically it      creates another file and adds the messages.
* DailyRollingFileAppender : It is Similar to Rolling File Appender, but it creates the files based on the given frequency.
* ConsoleAppender : This appends to the console of the system.
* SMTPAppender : This sends mail to the specific mail when a priority level occurs, example : sends mail when a FATAL error occurs.
* SysyLogAppender : Appends to a remote syslog domain.

# Layout 

The Layout component defines the format in which the log statements are written to the log destination by appender, like html or .log so on. There are different kind of layout are present

SimpleLayout : it presents the log level - log messages format
PatternLayout : formats the output based on a conversion pattern specified, or if no conversion specified, it takes the default conversion pattern
HTMLLayout : present the log messages as HTML table to the user.
XMLLayout : It provides the logs in the format of XML.

# Output to Console and File
All logging will be redirected to both log file and console.

log4j.rootLogger=INFO, file, stdout

# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=C:\\logging.log
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

Logger
Explanation of Properties File : 1. Logger section defines what is the level of Priority and where it send the logs. Here the Priority is 'DEBUG' and the destination is 'file'

Root logger denotes where to write and a priority level to write
log4j.rootLogger=DEBUG, file

Appender
2. Appender Section defines the details of the destination, which nothing but what is the type of appends, file location and the file size. Here Appender Type is RollingFileAppender, File Location is C:~\firstLogOutput.log, file Size :10mb.

# Direct log messages to a log file
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=C:\~\firstLogOutput.log
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=10


3. Layout defines how the out put should look like. Here layout type is PatternLayout. Refer for Pattern Layout

# layout of the log output pattern
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=[%t] %-5p %c %x - %m%n

# Integration of Properties file with Log4J
After defining the values in properties file we have to integrate the properties file to the log4j system. Please find the steps to integrate

1. Create java class inside java Project.

2. Create the logger object by calling the getLogger method from the Logger Class, pass the Log name as a parameter, most of the tie people pass the class name as a parameter.

static Logger log = Logger.getLogger(FirstLog.class);

3. Load the peroperties file using configure methid from PropertyConfigurator class, pass the properties file path as the parameter.

//PropertiesConfigurator is used to configure logger from the properties file
PropertyConfigurator.configure("C:\~\log4j.properties");

4. Call the methosd from the Logger class object (log)

//log the message to file
log.trace("This is a debug message");
log.info("This is an info message");

5. Execute the file like normal java class and find the output file.

Complete program for Log4j with properties file

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

```java
public class FirstLog {
	static Logger log = Logger.getLogger(FirstLog.class);
	public static void main(String[] args) {
		//PropertiesConfigurator is used to configure logger from the properties file
				PropertyConfigurator.configure("C:\~\log4j.properties");

				//log the message to file
				log.trace("This is a debug message");
				log.info("This is an info message");
	}
}
